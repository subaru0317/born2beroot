uname -a


$ sudo apt-get update -y
$ sudo apt-get install -y net-tools
$ nano /usr/local/bin/monitoring.sh
  #!/bin/bash
  wall $'#Architecture: ' `hostnamectl | grep "Operating System" | cut -d ' ' -f5- ` `awk -F':' '/^model name/ {print $2}' /proc/cpuinfo | uniq | sed -e 's/^[ \t]*//'` `arch` \
  $'\n#CPU physical: '`cat /proc/cpuinfo | grep processor | wc -l` \
  $'\n#vCPU:  '`cat /proc/cpuinfo | grep processor | wc -l` \
  $'\n'`free -m | awk 'NR==2{printf "#Memory Usage: %s/%sMB (%.2f%%)", $3,$2,$3*100/$2 }'` \
  $'\n'`df -h | awk '$NF=="/"{printf "#Disk Usage: %d/%dGB (%s)", $3,$2,$5}'` \
  $'\n'`top -bn1 | grep load | awk '{printf "#CPU Load: %.2f\n", $(NF-2)}'` \
  $'\n#Last boot: ' `who -b | awk '{print $3" "$4" "$5}'` \
  $'\n#LVM use: ' `lsblk |grep lvm | awk '{if ($1) {print "yes";exit;} else {print "no"} }'` \
  $'\n#Connection TCP:' `netstat -an | grep ESTABLISHED |  wc -l` \
  $'\n#User log: ' `who | cut -d " " -f 1 | sort -u | wc -l` \
  $'\nNetwork: IP ' `hostname -I`"("`ip a | grep link/ether | awk '{print $2}'`")" \
  $'\n#Sudo:  ' `grep 'sudo ' /var/log/auth.log | wc -l`

$ sudo visudo
  your_username ALL=(ALL) NOPASSWD: /usr/local/bin/monitoring.sh
$ sudo reboot
$ sudo /usr/local/bin/monitoring.sh
$ sudo crontab -u root -e
  */10 * * * * /usr/local/bin/monitoring.sh

[scriptの停止/起動]
$ sudo systemctl disable cron
$ sudo reboot
$ systemctl status cron
$ sudo systemctl enable cron
$ sudo reboot


[monitoring.shの解説]
#!/bin/bash

wall $'#Architecture: ' `hostnamectl | awk '/Kernel/ {print $2 $3}'` `hostnamectl | awk '/Operating System/ {for (i=3;i<=NF;i++) printf $i" "}` \
wall		: 現在ログインしている全てのユーザの端末に標準入力の内容を表示する。
hostnamectl	: 
	Linuxシステム上でホスト名と関連するシステム情報を管理するためのコマンド。
	Static hostname	: システムの静的なホスト名を示す。ホスト名は通常、ネットワーク上で識別するための名前。
	Icon name		: デバイスやシステムのアイコンに関連する名前。通常、デスクトップ環境で使用される。
	Chassis			: システムの筐体タイプを示す。ラップトップ、デスクトップ、サーバなど。
	Machine ID		: システムの一意の識別子で、ランダムに生成される。システムの再インストールなどに関係する。
	Boot ID			: システムのブートセッションごとに生成される一意の識別子。システムの起動ごとに異なる値となる。
	Virtualization	: システムが仮想化環境内で動作している場合、その仮想化プラットフォームの情報を示す。
	Operating System: インストールされているOSの名称を示す。
	Kernel			: 現在実行中のカーネルのバージョンを示す。カーネルはOSの中核であり、ハードウェアとソフトウェアのインターフェースを提供する。
	Architecture	: システムのプロセッサアーキテクチャを示す。x86_64、arm、ppcなど。
for (i=3;i<=NF;i++) printf $i" "
	3番目以降をすべて出力
$'\n#CPU physical: '`cat /proc/cpuinfo | grep "physical\sid" | wc -l` \
/proc/cpuinfoについては下記に記載
"physical\sid"の\sは空白を示している．
$'\n#vCPU:  '`cat /proc/cpuinfo | grep processor | wc -l` \
processorに論理プロセッサの番号が書かれている．例えばプロセッサが0~3まであるとき，
processor: 0
processor: 1
processor: 2
processor: 3
のようになる．よって，wc -lで行数を取得することによってプロセッサの数を取得する．
$'\n'`free -m | awk 'NR==2{printf "#Memory Usage: %s/%sMB (%.2f%%)", $3,$2,$3*100/$2 }'` \
freeコマンド：システム内のメモリの状況を確認することができる
	total 		 :	合計メモリ量
	used  		 :	メモリ使用量(実際にプロセスで使用されているメモリ量)
	free  		 :	全く使われていない未割り当てのメモリ量
	shared		 :	共有メモリで使用しているメモリ量
	buff/cache :	ファイルバッファ + キャッシュメモリに使われているメモリ量
	available	 :	プロセスが利用できるメモリ量

	Mem		:	物理メモリ
	Swap	: スワップメモリ
						LinuxではSwapというパーティションが一般的には作成される．
						これは，ハードディスク上に作成する仮想的なメモリ領域.
						(ストレージデバイスをメモリの代わりに使用ということ　)
						Linuxを使用していて実メモリが不足した場合，ハードディスクに
						作成されたスワップ領域(仮想メモリ)が使用される						
						プログラムの未使用ページ(固定サイズの小さなサイズのこと)がスワップ領域におかれる．
						必要になったら物理メモリへロードされる．
				　共有メモリ
				　　特定範囲の物理メモリを複数プロセスで共有する機構のこと．(他のプロセスからも参照可能となる)
						「プロセスごとにメモリが分けられているから安全」というのは基本だが，
						同じメモリを共有できた方が便利な場合がある．
						具体例として，巨大な画像データを複数プロセスで編集するときがあげられる
						画像データをおいたメモリを共有メモリとして扱う．
						ユーザメモリ，カーネルメモリ間のデータ転送，システムコールなどが不要となるため，
						共有メモリは高速な通信手段である．

-m オプション
	メモリ量をメガバイト単位で表示する．
NR == 2
今回必要なのはRAM(物理メモリ)なので，Memだけが必要．
ストレージデバイスであるSwapは不必要．
従って，出力結果のMemだけを取得する．
{printf ...}
total: 合計メモリ量と used: メモリ使用量を取り出して，出力する．


$'\n'`df -h | awk '$NF=="/"{printf "#Disk Usage: %d/%dGB (%s)", $3,$2,$5}'` \
df: ファイルシステムのディスク容量の使用状況を表示する
	ファイル名を指定しない - 現在マウントしているすべてのファイルシステムの空きディスク容量を表示する
	マウント --- コンピュータ上で利用可能なストレージデバイスやリモートファイルシステムなど、
							ファイルとデータを格納するためのディスク領域を表す
-h オプション
人が読みやすい形式で表示する
awk '$NF=="/"
Mounted onの"/"を表す．NFはフィールド数を意味するため，$NFは一番最後のフィールドを指す．
/dev：このディレクトリは、Linuxシステム上のデバイスファイルが格納されているディレクトリです。
			デバイスファイルは物理的なハードウェアデバイスや論理的なデバイスにアクセスするための仮想ファイルです。

/mapper：これはLVM（Logical Volume Manager）によって提供されるデバイスの仮想的なパスです。
					LVMは、物理ボリューム（Physical Volume）から論理ボリューム（Logical Volume）を作成し、管理するためのボリューム管理ツールです。

smihata--vg-root：
これはLVMで作成された論理ボリュームの名前です。
smihata--vgはボリュームグループ（Volume Group）の名前であり、
rootはこの論理ボリュームの名前です。
この論理ボリュームは通常、Linuxシステムのルートファイルシステム（/）
として使用されます．

$'\n'`top -bn1 | grep Cpu | awk '{printf "#CPU Load: %.2f\n", 100-$8}'` \
top: Linuxの稼働中のシステムの動的なリアルタイムのタスクを表示する
-b: バッチモードで実行する．
バッチモードでは、topは対話的なユーザーインタラクションを必要とせず，単一の出力を生成します。

-n1: topが情報を更新する回数を指定する。
-n1は、topが1回だけ情報を表示して終了することを意味します。
topがリアルタイムの情報を表示せずに、単一の瞬間のスナップショットを生成します．

id: アイドル状態
    CPUがアイドル状態である時間の割合を示します。
		アイドル状態のCPUは何も実行されておらず、空きリソースがあることを示します。
		従って，現在の使用率は100 - idle(%)で計算することができます．

$'\n#Last boot: ' `who -b | awk '{print $3" "$4}'` \
who: 誰がログインしているかを表示する
-b:  最後にシステムが起動した時刻
$3: 年月日
$4: 時刻


$'\n#LVM use: ' `lsblk | (grep -q lvm && echo "yes") || echo "no"
lsblkにTYPEはデバイスがマウントされている場所を示す．
-qは沈黙モード．標準出力は行わない．合致するものが存在すれば，即座に正常終了する．

$'\n#Connection TCP:' `ss -ant | grep ESTAB |  wc -l` \
$'\n#Connection TCP:' `ss -ant | grep -c ESTAB` \
ss: ネットワークの状況を示す(netstatは最新のディストリビューションでしばしば非推奨)
	-a: すべてのソケットの状態を表示する
	-n: アドレスやポートを数値で表示. 名前解決を行わないため高速
	-t: TCPのみを表示(コネクションを確立するのはTCP．UDPは確立しない．そのため,UDPは数えない)

$'\n#User log: ' `who | awk '{print $1}' | sort -u | wc -l` \
whoは現在ログインしているユーザを出力する．
しかし，同じユーザーが複数のターミナルでログインしている場合、それぞれを別々にカウントされる．
この重複を取り除く必要がある．
awk '{print $1}': ユーザ名のみ取得する
sort -u: 重複を取り除いてソートする
wc -l: 行数の取得


$'\nNetwork: IP ' `hostname -I`"("`ip addr show | grep link/ether | awk '{print $2}'`")" \
hostname -i : lo(ローカルループバックインターフェース)のアドレス．
							これは，PCが内部で使用するためのアドレス．
hostname -I : 外部との通信で使用するIPアドレス．
(ip addr showで詳しい情報を確認できる)

$'\n#Sudo:  ' `grep -c 'sudo:' /var/log/auth.log`
grep -c: マッチした行数が出現した回数を出力する(wc -lと同じ)
auth.log: ログイン履歴に関する情報を含むログファイル．
Q．なんで, sudo1回実行しただけで，たくさんSudoの値が増えるの？
A. auth.logにsudo実行時に
    ・sudoのコマンド実行のログエントリ: このエントリは、どのユーザーがsudoコマンドを実行し、どのコマンドが実行されたかに関する詳細情報を提供します。
    ・ユーザーの認証ログインログエントリ: このエントリは、sudoコマンドを実行したユーザーの認証に関する情報を提供します。ユーザーの認証が成功または失敗したか、認証方法などが含まれます。
    ・PAM（Pluggable Authentication Module）のログエントリ: このエントリは、PAMを介してsudoコマンドの認証が試行された詳細情報を提供します。認証試行の成功または失敗が記録されます。
	 がたいてい記録されるから．

/proc/cpuinfo:
	processor					: 論理プロセッサの番号を示す．
	vendor_id					: プロセッサの製造元を示す．ex) GenuineIntel, AuthenticAMDなど
	cpu family				: プロセッサファミリーの番号を示す．
											同じアーキテクチャや設計思想に基づいて開発された一連のプロセッサモデルのグループを指す．
											ex) Intel Coreシリーズ，ARM Cortexシリーズなど
	model							: プロセッサモデルの番号を示す．
											プロセッサファミリ内での個々の製品やバリエーションを指す．
											ex) Intel Core i7-8700K
	model name				: プロセッサのモデル名を示す．
											特定のプロセッサ製品を識別するための名称
	stepping					: プロセッサのステップ番号を示す．
											プロセッサの製造工程やリビジョンのバージョンを識別するための番号．
											プロセッサは製造過程で改良や修正がしばしば行われる．それぞれに番号が振られる．
	microcode					: プロセッサのマイクロコードのバージョンや更新情報を示す．
											マイクロコード：プロセッサの動作やセキュリティの改善を行うために定期的に更新される．
	cpu MHz						: プロセッサのクロック周波数をメガヘルツで示す．
	cache size				: プロセッサの各レベルのキャッシュサイズを示す．
											キャッシュとは高速なメモリのこと．
											キャッシュは階層的な構造を持つ．L1キャッシュ，L2キャッシュ．．．などとあり，容量と速度がトレードオフとなっている．
	physical id				: 論理プロセッサが属する物理的なプロセッサ(ソケット)の識別子を示す．
	siblings					: 同じ物理プロセッサ上での同時実行可能なスレッド数を示す．
	core id						: マルチコアプロセッサが複数の物理コアを持つ場合，各論理プロセッサ(スレッド)がどの物理コアに属しているかを示す識別子．
	cpu cores					: 物理コア数を示す．
	apicid						: APIC(Advanced Programmable Interrupt Controller)に関連する識別子．プロセッサがシステム内で一意に識別されるために使用される．
											APICは，複数のプロセッサやデバイス間に割り込みを管理し，制御するための高度な制御装置．
	initial apicid		: ブートプロセッサ(最初に起動するプロセッサ)のAPIC識別子を示す．
	fpu								: 浮動小数点ユニット(FPU)の有無を示す．FPUは浮動小数点をサポートするユニットであり，数値計算や科学技術計算などで用いられる．
	fpu_exception			: 浮動小数点例外が有効か無効かを示す．計算中に発生する数値のオーバーフローやアンダーフロー，ゼロ除算などの特殊条件を処理するためのもの．
	cpuid level				: CPUID命令のレベルを示す．プロセッサの特性や機能に関する情報を取得するための命令．
	wp								: Write Protectビットの有無を示す．一部のプロセッサでメモリ領域を読取り専用または書き込み可能に設定するための機能．
	flags							: プロセッサのサポートをする特殊機能を示す．
	bugs							: プロセッサのバグや制約条件に関連する情報を示す．
	bogomips					: システムのボゴマイプス値を示す(ベンチマーク単位)
	TLB size					: Translation Lookaside Bufferのサイズを示す．
											TLBは仮想アドレスと物理アドレスの対応を保持するキャッシュであり，メモリあくせすの拘束かに寄与します．
	clflush size			: キャッシュラインのフラッシュ(無効化)のサイズを示す．キャッシュラインは，メモリアクセスの最小単位．データをキャッシュからメモリに戻す際のフラッシュするサイズ．
											単位はByte．プロセッサ内のキャッシュはこのサイズの塊単位でデータを扱う．
	cache_alignment		: キャッシュのアライメント(配置)サイズを示す．アライメントは，データや命令がキャッシュ内でどのように配置されるかを指定する．
	address sizes			: アドレスサイズに関連する情報を示す．32bit architectureでは32bit, 64bit architectureでは64bitのアドレス空間がサポートされている．
	power management	: 電力管理に関する情報を示す．プロセッサの省エネ機能やクロック周波数の変更など，電力消費を調整する機能に関連する情報が含まれる．

gernal control : sudoログ
cron